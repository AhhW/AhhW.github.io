<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AhhW&#39;s Blog</title>
  
  <subtitle>毕竟几人真得鹿&lt;br/&gt;不知终日梦为鱼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-15T11:11:41.917Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AhhW</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>问题求解OJ第三、四周</title>
    <link href="http://yoursite.com/2019/04/15/%E9%97%AE%E6%B1%82OJ%E7%AC%AC%E4%BA%8C%E5%AD%A6%E6%9C%9F%E7%AC%AC%E4%B8%89%E5%9B%9B%E5%91%A8/"/>
    <id>http://yoursite.com/2019/04/15/问求OJ第二学期第三四周/</id>
    <published>2019-04-15T11:11:37.000Z</published>
    <updated>2019-04-15T11:11:41.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题求解OJ第三周"><a href="#问题求解OJ第三周" class="headerlink" title="问题求解OJ第三周"></a>问题求解OJ第三周</h2><h3 id="A-逆序对"><a href="#A-逆序对" class="headerlink" title="A. 逆序对"></a>A. 逆序对</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>求数组中逆序对的个数</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>改写归并排序，在合并时计数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">merge</span><span class="params">(ll arr[], ll temp[], ll l, ll m, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll count = <span class="number">0</span>, i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = l; i &lt;= r; i++) temp[i] = arr[i];</span><br><span class="line">    ll k = l;</span><br><span class="line">    <span class="keyword">for</span>(i = l, j = m + <span class="number">1</span>; i &lt;= m &amp;&amp; j &lt;= r; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp[i] &gt; temp[j])</span><br><span class="line">        &#123;</span><br><span class="line">            count += m - i + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//若左序列元素比右序列元素大</span></span><br><span class="line">            <span class="comment">//逆序对数量增加该元素到左序列尾的元素数量</span></span><br><span class="line">            <span class="comment">//其余代码为归并排序的步骤</span></span><br><span class="line">            arr[k] = temp[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> arr[k] = temp[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不要忘记下面两行</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt; m) <span class="keyword">while</span>(j &lt;= r) arr[k++] = temp[j++];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">while</span>(i &lt;= m) arr[k++] = temp[i++];</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">reversePair</span><span class="params">(ll arr[], ll temp[], ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    ll ln = reversePair(arr, temp, l, m);</span><br><span class="line">    ll rn = reversePair(arr, temp, m + <span class="number">1</span>, r);</span><br><span class="line">    ll mn = merge(arr, temp, l, m, r);</span><br><span class="line">    <span class="keyword">return</span> ln + rn + mn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, i;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ll test[n], t[n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; test[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; reversePair(test, t, <span class="number">0</span>, i - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题求解OJ第四周"><a href="#问题求解OJ第四周" class="headerlink" title="问题求解OJ第四周"></a>问题求解OJ第四周</h2><h3 id="A-组合数2"><a href="#A-组合数2" class="headerlink" title="A. 组合数2"></a>A. 组合数2</h3><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>求解 $\left(\sum_{i=0}^{\min (x, y)} \left( \begin{array}{c}{x} \ {i}\end{array}\right)\right) \quad \bmod 1000000007$</p><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h4><p>组合数函数预处理逆元优化复杂度，组合数公式$\sum_{i=0}^{m} \left( \begin{array}{c}{m} \ {i}\end{array}\right) \left( \begin{array}{l}{n} \ {i}\end{array}\right)=\left( \begin{array}{c}{n+m} \ {m}\end{array}\right)$（范德蒙恒等式的一个推论）取代两层循环优化复杂度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinomialCoefficient</span>//定义一个类在取模下求解二次项系数</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factorial;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factorial_inverse;</span><br><span class="line">    <span class="keyword">int</span> n, mod;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BinomialCoefficient() &#123;&#125;</span><br><span class="line">    BinomialCoefficient(<span class="keyword">int</span> _n, <span class="keyword">int</span> _mod) : n(_n), mod(_mod)</span><br><span class="line">    &#123;</span><br><span class="line">        factorial = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        factorial_inverse = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            factorial[i] = (<span class="keyword">long</span> <span class="keyword">long</span> )factorial[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            factorial_inverse[i] = mod - (<span class="keyword">long</span> <span class="keyword">long</span>)factorial_inverse[mod % i] * (mod / i) % mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            factorial_inverse[i] = (<span class="keyword">long</span> <span class="keyword">long</span>)factorial_inverse[i - <span class="number">1</span>] * factorial_inverse[i] % mod;</span><br><span class="line">            assert((<span class="keyword">long</span> <span class="keyword">long</span>)factorial[i] * factorial_inverse[i] % mod == <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">int</span> m)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        assert(n &gt;= m &amp;&amp; n &gt;= <span class="number">0</span> &amp;&amp; m &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)factorial[n] * factorial_inverse[m] % mod * factorial_inverse[n - m] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; C(<span class="number">2000000</span>, <span class="number">1000000007</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a ? b : a &lt;= b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, i, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> a[t + <span class="number">1</span>], b[t + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; t; i++) <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += C(a[i] + b[i], min(a[i], b[i])) % <span class="number">1000000007</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum % <span class="number">1000000007</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-约瑟夫环"><a href="#B-约瑟夫环" class="headerlink" title="B. 约瑟夫环"></a>B. 约瑟夫环</h3><h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>现在有$n$个人, 编号从$0$到$n−1$, 站成一圈, 编号为$i$的人右手边是编号为$i+1$的人($n-1$的右手边为$0$), 进行一种约瑟夫环游戏的变式.</p><p>游戏一共进行$n−1$轮, 一开始编号为$0$的人手里拿着旗子. 在第$i$轮(从$1$开始计数), 手上拿着旗子的人把旗子传给他右手边的人, 一共传$w[i]$次, 传完之后拿着旗子的人退出队伍, 并把旗子传给他右手边的人. 问最后剩在队伍里的人是谁.</p><h4 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h4><p>用所给数组取代递推式 $f(1)=0, f(i)=(f(i-1)+m) \quad \bmod i​$ 中的 $m​$<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn] &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Jsp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (w[c] + Jsp(a - <span class="number">1</span>, c + <span class="number">1</span>)) % a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, tmp;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">        w[i] = tmp + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Jsp(n, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="C-第k大子段"><a href="#C-第k大子段" class="headerlink" title="C. 第k大子段"></a>C. 第k大子段</h3><h4 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h4><p>给定一个数列$a_{1}, a_{2}, \cdots, a_{n}​$, 对每个二元组$(l, r), 1 \leq l \leq r \leq n​$, 按以下方法定义一个偏序关系</p><p>记$S(l, r)=\sum_{i=l}^{r} a_{i}$</p><p>对于$\left(l_{1}, r_{1}\right),\left(l_{2}, r_{2}\right)$</p><ul><li>若$S\left(l_{1}, r_{1}\right)&lt;S\left(l_{2}, r_{2}\right)$，则$\left(l_{1}, r_{1}\right)&lt;\left(l_{2}, r_{2}\right)$</li><li>若$S\left(l_{1}, r_{1}\right)=S\left(l_{2}, r_{2}\right)​$，且$l_{1}&gt;l_{2}​$，则$\left(l_{1}, r_{1}\right)&lt;\left(l_{2}, r_{2}\right)​$</li><li>若$S\left(l_{1}, r_{1}\right)=S\left(l_{2}, r_{2}\right)$，且$l_{1}=l_{2}$，且$r_{1}&gt;r_{2}$，则$\left(l_{1}, r_{1}\right)&lt;\left(l_{2}, r_{2}\right)​$</li></ul><p>把每个二元组$(l, r), 1 \leq l \leq r \leq n$按以上定义从小到大排序，询问其中第$k$大的二元组（从1开始数，第1大的就是最大的）</p><p>$5 \leq n \leq 10^{5}$<br>$1 \leq k \leq 10$<br>$-10^{5} \leq a_{i} \leq 10^{5}$</p><h4 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h4><p>模拟，先确定一个区间的左端点$l(1\le l \le n)$，此时$s[l-1]$已经确定，若要使区间和尽可能大，则要找到使得$s<a href="l\le r\le n">r</a>$尽可能大的右端点，所以根据题意要找出以$l$为左端点的最大的$k$个区间。从$n$到$1$枚举左端点，而在枚举过程中每次$l$左移，以$l-1$为左端点的可能的最大的$k$个区间的右端点在以$l$为左端点的最大的$k$个区间与$s[l-1]$中，维护当前右边最大的$k$个区间，每次向左移动一位时就又有了一个可能的$s[r]$，把它与当前右边最大的$k$个区间比较并去掉最小的，就得到了新的当前右边最大的$k$个区间。最终得到了一个$n \times k$表，也就是每个左端点对应的前$k$大区间的信息，把各行按降序排序就得到$n$个长度为$k$的有序表，扫描$k-1$次$n$个表的表头元素，每次都去掉最大的就得到答案。若k无限制，可参考<a href="http://www.cnblogs.com/2020pengxiyue/p/9564435.html#_caption_3" target="_blank" rel="noopener">这篇文章</a>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(i,x,y) for (int i=x;i&lt;=y;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> d(i,y,x) for (int i=y;i&gt;=x;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> s(x) (int)(x.size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> uLL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = (<span class="number">1e5</span>) + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = (<span class="number">1e18</span>);</span><br><span class="line"><span class="keyword">int</span> n, K, cur, pos[maxn];</span><br><span class="line">LL maxi, a[maxn], s[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;LL, <span class="keyword">int</span>&gt; &gt; S;</span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;LL, <span class="keyword">int</span>&gt; &gt;::iterator it;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;LL, <span class="keyword">int</span>&gt; &gt; v[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;K);</span><br><span class="line">    r(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    r(i, <span class="number">1</span>, n) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    d(i, n, <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        S.insert(make_pair(-s[i], i));</span><br><span class="line">        <span class="keyword">if</span> ((n - i) &gt;= K) S.erase(--S.end());</span><br><span class="line">        <span class="keyword">for</span> (it = S.begin(); it != S.end(); ++it) </span><br><span class="line">            v[i].push_back(make_pair(-(*it).first - s[i - <span class="number">1</span>], (*it).second));</span><br><span class="line">    &#125;</span><br><span class="line">    r(i, <span class="number">1</span>, n) pos[i] = <span class="number">0</span>;</span><br><span class="line">    r(i, <span class="number">1</span>, K - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        maxi = -INF;</span><br><span class="line">        r(j, <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> (pos[j] &lt; s(v[j])) </span><br><span class="line">            <span class="keyword">if</span> (v[j][pos[j]].first &gt; maxi) maxi = v[j][pos[j]].first, cur = j;</span><br><span class="line">        ++pos[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    maxi = -INF;</span><br><span class="line">    r(j, <span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (pos[j] &lt; s(v[j])) </span><br><span class="line">        <span class="keyword">if</span> (v[j][pos[j]].first &gt; maxi) maxi = v[j][pos[j]].first, cur = j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, cur, v[cur][pos[cur]].second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题求解OJ第三周&quot;&gt;&lt;a href=&quot;#问题求解OJ第三周&quot; class=&quot;headerlink&quot; title=&quot;问题求解OJ第三周&quot;&gt;&lt;/a&gt;问题求解OJ第三周&lt;/h2&gt;&lt;h3 id=&quot;A-逆序对&quot;&gt;&lt;a href=&quot;#A-逆序对&quot; class=&quot;header
      
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题求解" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/"/>
    
      <category term="OJ" scheme="http://yoursite.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记 (一)</title>
    <link href="http://yoursite.com/2019/02/18/temp/Python%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/02/18/temp/Python 学习笔记 (一)/</id>
    <published>2019-02-18T09:34:06.000Z</published>
    <updated>2019-02-18T10:02:03.629Z</updated>
    
    <content type="html"><![CDATA[<p>当时只道是寻常。<a id="more"></a></p><p>traceback：程序无法成功运行时，Python解释器提供的一条记录，指出了什么位置出现了错误。</p><p>在Python中，用引号括起来的都是字符串，引号可以时单引号或双引号。</p><p><strong>方法</strong>：在name.title()中，name后面的句点让Python对变量name执行方法title()指定的操作</p><p>title()：将字符串的每个单词的首字母改为大写</p><p>upper()：将字符串全部大写</p><p>lower()：将字符串全部小写</p><p>拼接：Python用加号(+)来合并字符串</p><p>rstrip()：暂时删除字符串末尾的空白</p><p>lstrip()：暂时删除字符串开头的空白</p><p>strip()：暂时删除字符串两端的空白</p><p><em>如果要永久删除，需要将删除空白后的结果存回原来的变量中。</em></p><p>str()：将非字符串值表示为字符串</p><p><strong>列表</strong>：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时只道是寻常。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C++ 学习笔记 (三)</title>
    <link href="http://yoursite.com/2019/02/18/temp/C++%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E4%B8%89)/"/>
    <id>http://yoursite.com/2019/02/18/temp/C++ 学习笔记 (三)/</id>
    <published>2019-02-18T09:34:05.000Z</published>
    <updated>2019-02-18T10:09:23.807Z</updated>
    
    <content type="html"><![CDATA[<p>人生如逆旅，我亦是行人。<a id="more"></a></p><p><code>C++ Primer</code>的第四部分，即高级主题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生如逆旅，我亦是行人。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++ 学习笔记 (二)</title>
    <link href="http://yoursite.com/2019/02/18/temp/C++%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2019/02/18/temp/C++ 学习笔记 (二)/</id>
    <published>2019-02-18T09:34:04.000Z</published>
    <updated>2019-02-18T09:56:36.903Z</updated>
    
    <content type="html"><![CDATA[<p>人间有味是清欢。<a id="more"></a></p><p><code>C++ Primer</code>的第三部分，即类设计者的工具。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人间有味是清欢。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++ 学习笔记 (一)</title>
    <link href="http://yoursite.com/2019/02/18/temp/C++%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/02/18/temp/C++ 学习笔记 (一)/</id>
    <published>2019-02-18T09:34:03.000Z</published>
    <updated>2019-02-18T09:56:17.601Z</updated>
    
    <content type="html"><![CDATA[<p>一点浩然气，千里快哉风。<a id="more"></a></p><p>C++ Primer`的第二部分，即C++标准库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一点浩然气，千里快哉风。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>C++ 学习笔记 (零)</title>
    <link href="http://yoursite.com/2019/02/18/temp/C++%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E9%9B%B6)/"/>
    <id>http://yoursite.com/2019/02/18/temp/C++ 学习笔记 (零)/</id>
    <published>2019-02-18T09:34:02.000Z</published>
    <updated>2019-02-18T09:55:35.119Z</updated>
    
    <content type="html"><![CDATA[<p>杏花春雨江南。<a id="more"></a></p><p><code>C++ Primer</code>的第一部分的第六章函数和第七章类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杏花春雨江南。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>图论入门：树</title>
    <link href="http://yoursite.com/2019/02/10/temp/%E5%9B%BE%E8%AE%BA%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/10/temp/图论入门/</id>
    <published>2019-02-10T14:14:36.000Z</published>
    <updated>2019-02-18T10:10:09.151Z</updated>
    
    <content type="html"><![CDATA[<p>殷勤昨夜三更雨，又得浮生一日凉。<a id="more"></a></p><h1 id="一、堆的维护"><a href="#一、堆的维护" class="headerlink" title="一、堆的维护"></a>一、堆的维护</h1><h2 id="向下调整"><a href="#向下调整" class="headerlink" title="向下调整"></a>向下调整</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//传入需要向下调整的节点编号i，比如传入1，即为从堆的顶点开始向下调整</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, flag = <span class="number">0</span>; <span class="comment">//flag用来表示是否需要继续向下调整</span></span><br><span class="line">    <span class="keyword">while</span>(i * <span class="number">2</span> &lt;= n <span class="keyword">and</span> flag = <span class="number">0</span>) <span class="comment">//当结点i有儿子且需要继续向下调整时，循环执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断结点i与做儿子的大小关系，并用t记录较小值的结点编号</span></span><br><span class="line">        <span class="keyword">if</span>(h[i] &gt; h[i * <span class="number">2</span>])</span><br><span class="line">            t = i * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t = i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果结点i又右儿子，再对右儿子讨论</span></span><br><span class="line">        <span class="keyword">if</span>(i * <span class="number">2</span> + <span class="number">1</span> &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果右儿子值更小，更新较小值的节点编号</span></span><br><span class="line">            <span class="keyword">if</span>(h[t] &gt; h[i * <span class="number">2</span> + <span class="number">1</span>])</span><br><span class="line">                t = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果最小值的结点编号不是i说明有子节点比父节点更小</span></span><br><span class="line">        <span class="keyword">if</span>(t != i)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(t, i); <span class="comment">//交换父节点与最小值所在的子节点，swap函数是自己写的</span></span><br><span class="line">            i = t; <span class="comment">//更新i为刚刚交换的子节点的编号，以便继续向下调整</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向上调整"><a href="#向上调整" class="headerlink" title="向上调整"></a>向上调整</h2><h1 id="二、堆排序"><a href="#二、堆排序" class="headerlink" title="二、堆排序"></a>二、堆排序</h1><h1 id="三、并查集"><a href="#三、并查集" class="headerlink" title="三、并查集"></a>三、并查集</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;殷勤昨夜三更雨，又得浮生一日凉。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>节物风光不相待，桑田碧海须臾改</title>
    <link href="http://yoursite.com/2019/02/04/%E6%96%B0%E5%B9%B4/"/>
    <id>http://yoursite.com/2019/02/04/新年/</id>
    <published>2019-02-04T00:10:13.000Z</published>
    <updated>2019-02-05T01:28:34.510Z</updated>
    
    <content type="html"><![CDATA[<p>​    <a id="more"></a></p><p>放下手中的高代，离开桌上的键盘，我凝神细思，今年三十窗外的鞭炮声尤其多，在庆祝什么、哀悼什么、告别什么。</p><p>昨天傍晚，站在楼下望着远方的天空，风景与空气的味道恒常如新，曾经的满身疲惫而又满心天真幻想的我，却在盛夏的高温、秋冬的霜雪里一去不返了。</p><p>坐在吊灯下抑或台灯旁的漆黑夜晚，走在弥漫校园的树叶沙沙狂响中，跑过花园边风吹落满树的樱花飞舞，更不要提书桌里杂乱的试卷与练习题······</p><p>我以为我会永远记得，像手掌中的纹路一样永远为伴，记忆却早已变得像晕着水雾的窗玻璃，斑驳脱落的墙壁表面，让人难以看的清晰。</p><p>但我更加清楚的看见，未来在我眼前或者说在我手中，平台宽广，视野开阔，何种成败皆取决于我如何面对选择，于是在漫天鞭炮声中，我想起来——节物风光不相待，桑田碧海须臾改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="年终" scheme="http://yoursite.com/tags/%E5%B9%B4%E7%BB%88/"/>
    
  </entry>
  
  <entry>
    <title>最基本的四种最短路径算法</title>
    <link href="http://yoursite.com/2019/02/03/temp/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/03/temp/最短路径入门/</id>
    <published>2019-02-03T15:16:03.000Z</published>
    <updated>2019-02-18T10:02:11.836Z</updated>
    
    <content type="html"><![CDATA[<p>渭北春天树， 江东日暮云。 <a id="more"></a></p><h2 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> e[<span class="number">10</span>][<span class="number">10</span>], k, i, j, n, m, t1, t2, t3;</span><br><span class="line">    <span class="keyword">int</span> inf = <span class="number">99999999</span>; <span class="comment">//用inf存储一个我们认为的正无穷值</span></span><br><span class="line">    <span class="comment">//通常这样定义inf，因为这样即使两个正无穷相加，其和仍不超过int类型的范围（C语言int类型可以存储的最大正整数是2147483647）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入顶点个数，边的条数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化邻接矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> e[i][j] = inf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入边</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;t1, &amp;t2, &amp;t3);</span><br><span class="line">        e[t1][t2] = t3;<span class="comment">//两顶点t1与t2之间的边权值为t3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Floyd-Warshall算法核心语句</span></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span>(e[i][j]&gt;e[i][k] + e[k][j])</span><br><span class="line">                    e[i][j] = e[i][k] + e[k][j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%10d"</span>, e[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Floyd-Warshall算法常被用来处理多源最短路径问题，它采用的其实是动态规划思想。</p><p>另外，可以用这个算法处理带有负权边的图，但不可以处理带有负权环的图。</p><hr><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> e[<span class="number">10</span>][<span class="number">10</span>], dis[<span class="number">10</span>], book[<span class="number">10</span>], i, j, n, m, t1, t2, t3, u, v, min;</span><br><span class="line">    <span class="keyword">int</span> inf = <span class="number">99999999</span>;</span><br><span class="line">    <span class="comment">//读入顶点个数，边的条数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化邻接矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> e[i][j] = inf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入边</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;t1, &amp;t2, &amp;t3);</span><br><span class="line">        e[t1][t2] = t3;<span class="comment">//两顶点t1与t2之间的边权值为t3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化dis数组，也就是源点到其余顶点的初始路程</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = e[<span class="number">1</span>][i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化book数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        book[i] = <span class="number">0</span>;</span><br><span class="line">    book[<span class="number">1</span>] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Dijkstra算法核心语句</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在集合Q中选择离源点最近的顶点u</span></span><br><span class="line">        min = inf;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(book[j] == <span class="number">0</span> <span class="keyword">and</span> dis[j] &lt; min)</span><br><span class="line">            &#123;</span><br><span class="line">                min = dis[j];</span><br><span class="line">                u = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        book[u] = <span class="number">1</span>; <span class="comment">//将顶点u加入集合P</span></span><br><span class="line">        <span class="keyword">for</span>(v = <span class="number">1</span>; v &lt;= n; v++) <span class="comment">//并对顶点u的所有出边进行松弛操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e[u][v] &lt; inf)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[v] &gt; dis[u] + e[u][v])</span><br><span class="line">                    dis[v] = dis[u] + e[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dijkstra算法是一种基于贪心策略的算法，在没有负权边的图中才能保证算法的正确性。</p><p>之前一直用邻接矩阵存储图，对于稀疏图可以用邻接表来代替，使时间复杂度得到优化。</p><p>暂时使用数组来实现邻接表，而非真正的指针链表，这是一种实际应用中常用的方法。</p><hr><h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//用邻接表存储图，注意u，v，w三个数组的大小要比m的最大值大1</span></span><br><span class="line">    <span class="keyword">int</span> dis[<span class="number">10</span>], i, k, n, m, u[<span class="number">10</span>], v[<span class="number">10</span>], w[<span class="number">10</span>], check, flag;</span><br><span class="line">    <span class="keyword">int</span> inf = <span class="number">99999999</span>;</span><br><span class="line">    <span class="comment">//读入顶点个数，边的条数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入边</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u[i], &amp;v[i], &amp;w[i]); <span class="comment">//每行三个数表示顶点u[i]到顶点v[i]的边的权值为w[i]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化dis数组，也就是源点到其余顶点的初始路程</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Bellman-Ford算法核心语句</span></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= n - <span class="number">1</span>; k++)</span><br><span class="line">    <span class="comment">//有结论最短路径必为不含回路的简单路径，k轮松弛得到的是源点最多经过k条边到达其余顶点的最短路径长度，故最多进行n-1轮松弛就可以</span></span><br><span class="line">    &#123;</span><br><span class="line">        check = <span class="number">0</span>; <span class="comment">//用来标记dis数组在本轮松弛中是否发生了变化，如果没有变化则可以提前跳出循环</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++) <span class="comment">//所有边进行松弛操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[v[i]] &gt; dis[u[i]] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v[i]] = dis[u[i]] + w[i];</span><br><span class="line">                check = <span class="number">1</span>; <span class="comment">//dis数组更新，改变check的值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(check == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//如果dis数组没有更新，提前退出循环，结束算法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测负权回路</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span>(dis[v[i]] &gt; dis[u[i]] + w[i]) flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Negative circle is included."</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一轮松弛之后就有一些顶点已经求得最短路，此后每轮松弛却仍需判断是否这些顶点需要松弛，显然浪费了时间。</p><p>而队列优化的Bellman-Ford算法进行了这一优化，每次仅对最短路估计值更新的顶点的所有出边执行松弛操作。</p><hr><h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, i, k;</span><br><span class="line">    <span class="keyword">int</span> u[<span class="number">8</span>], v[<span class="number">8</span>], w[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> first[<span class="number">6</span>], next[<span class="number">6</span>]; <span class="comment">//first要比n的最大值大1，next要比m的最大值要大1</span></span><br><span class="line">    <span class="keyword">int</span> dis[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;, book[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//book数组用来记录每个顶点是否在队列中</span></span><br><span class="line">    <span class="keyword">int</span> que[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;, head = <span class="number">1</span>, tail = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> inf = <span class="number">99999999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入顶点个数，边的条数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化dis数组，也就是源点到其余顶点的初始路程</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        dis[i] = inf;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化book数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) book[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化first数组下标1~n的值为-1，表示1~n顶点暂时没有边</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) first[i] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读入边，并建立邻接表</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u[i], &amp;v[i], &amp;w[i]);</span><br><span class="line">        <span class="comment">//使用数组实现邻接表，为每个顶点i(i从1到n)设置了一个链表</span></span><br><span class="line">        <span class="comment">//first[u[i]]保存顶点u[i]的第一条边的编号，next[i]保存编号为i(i从1~m)的边的下一条边的编号</span></span><br><span class="line">        next[i] = first[u[i]];</span><br><span class="line">        first[u[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//源点(1号顶点)入队</span></span><br><span class="line">    que[tail] = <span class="number">1</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">//标记1号顶点已经入队</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail) <span class="comment">//队列不为空时循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        k = first[que[head]]; <span class="comment">//当前需要处理的队首顶点</span></span><br><span class="line">        <span class="keyword">while</span>(k != <span class="number">-1</span>) <span class="comment">//依次用当前顶点的所有边进行松弛操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[v[k]] &gt; dis[u[k]] + w[k]) <span class="comment">//判断松弛是否成功</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[v[k]] = dis[u[k]] + w[k]; <span class="comment">//更新源点到顶点v[k]的路程</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//用book数组判断顶点v[k]是否在队列中</span></span><br><span class="line">                <span class="keyword">if</span>(book[v[k]] == <span class="number">0</span>) <span class="comment">//如果不在队列中则加入队列</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//顶点v[k]入队</span></span><br><span class="line">                    que[tail] = v[k];</span><br><span class="line">                    tail++;</span><br><span class="line">                    book[v[k]] = <span class="number">1</span>; <span class="comment">//标记顶点v[k]已经入队</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            k = next[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将已经处理完的当前队首顶点出队并取消标记</span></span><br><span class="line">        book[que[head]] = <span class="number">0</span>;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种算法是基于队列优化的Bellman-Ford算法的。</p><p>SPFA算法在形式上与广搜非常相似，不同的是在广搜时一个顶点只能入队一次，而这里一个顶点在出队后如果最短路程估计值再次变小，就要再次入队重新对其出边进行松弛。</p><p>此外，如果某个点进入队列的次数超过n次，就可以判断存在负环。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;渭北春天树， 江东日暮云。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>搜索入门</title>
    <link href="http://yoursite.com/2019/02/02/temp/%E6%90%9C%E7%B4%A2%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/02/temp/搜索入门/</id>
    <published>2019-02-02T13:35:23.000Z</published>
    <updated>2019-02-05T09:21:08.140Z</updated>
    
    <content type="html"><![CDATA[<p>我是话痨了一点我知道！<a id="more"></a>但这样读起来特别轻松不是么？</p><h2 id="Intro-to-DFS"><a href="#Intro-to-DFS" class="headerlink" title="Intro to DFS"></a>Intro to DFS</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10001</span>],book[<span class="number">10001</span>],n;<span class="comment">//C语言的全局变量在未赋值以前默认为0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span><span class="comment">//step表示现在站在第几个盒子前</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(step==n+<span class="number">1</span>)<span class="comment">//如果站在第n+1个盒子前，则表示前n个盒子已经放好数字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出这一种排列，也就是前n个盒子中的数字</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//返回上一步(最近一次调用dfs函数的位置)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时站在第step个盒子前，请按照1到n的顺序尝试放入数字</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断数字i是否尚未使用</span></span><br><span class="line"><span class="keyword">if</span>(book[i]==<span class="number">0</span>)<span class="comment">//book[i]等于0表示i未使用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//尝试使用数字i</span></span><br><span class="line">a[step]=i;<span class="comment">//将i放入第step个盒子</span></span><br><span class="line">book[i]=<span class="number">1</span>;<span class="comment">//book[i]等于1表示i已使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第step个盒子已经放入数字，接着走到下一个盒子前</span></span><br><span class="line">dfs(step+<span class="number">1</span>);<span class="comment">//通过函数递归调用实现</span></span><br><span class="line">book[i]=<span class="number">0</span>;<span class="comment">//在进行下一次尝试前，务必将刚才尝试的数字i收回</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">dfs(<span class="number">1</span>);<span class="comment">//最开始站在第1个盒子前</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个简单的例子却包含了深度优先搜索的基本模型！</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n,m,p,q,min=<span class="number">99999999</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">51</span>][<span class="number">51</span>],book[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs()函数的功能是解决当前怎么办，也就是先检查当前是否已经到达终点，如果没有到达则找出下一步可以走的地方。对于这个问题，dfs()共需要维护三个参数，分别是当前点的行列坐标和已走过的步数。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果没有到达终点，则找出下一步可以走的地方，我们可以按照顺时针方向来尝试四个方向</span></span><br><span class="line"><span class="comment">//定义方向数组next，使用循环就很容易获得下一步的坐标</span></span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, <span class="comment">//向右</span></span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, <span class="comment">//向下</span></span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, <span class="comment">//向左</span></span><br><span class="line">        &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;<span class="comment">//向上</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//判断是否到达终点</span></span><br><span class="line"><span class="keyword">if</span>(x==p <span class="keyword">and</span> y==q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断是否需要更新最小值</span></span><br><span class="line"><span class="keyword">if</span>(step&lt;min)</span><br><span class="line">min=step;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//这个返回很重要</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下一个点的行列坐标用tx,ty存储</span></span><br><span class="line"><span class="keyword">int</span> tx,ty,k;</span><br><span class="line"><span class="comment">//枚举四种走法</span></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算下一个点</span></span><br><span class="line">tx=x+next[k][<span class="number">0</span>];<span class="comment">//下一个点的行</span></span><br><span class="line">ty=y+next[k][<span class="number">1</span>];<span class="comment">//下一个点的列</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//对下一个点进行一些判断：该点是否越界，是否为障碍物，是否已经在路径中</span></span><br><span class="line"><span class="keyword">if</span>(a[tx][ty] == <span class="number">0</span> <span class="keyword">and</span> book[tx][ty] == <span class="number">0</span> <span class="keyword">and</span> (tx&gt;=<span class="number">1</span> <span class="keyword">and</span> tx&lt;=n <span class="keyword">and</span> ty&gt;=<span class="number">1</span> <span class="keyword">and</span> ty&lt;=m))<span class="comment">//迷宫的范围为(1,1)到(n,m)</span></span><br><span class="line">&#123;</span><br><span class="line">book[tx][ty]=<span class="number">1</span>;<span class="comment">//标记这个点已经走过</span></span><br><span class="line">dfs(tx,ty,step+<span class="number">1</span>);<span class="comment">//开始尝试下一个点，且此时步数已经增加了1</span></span><br><span class="line">book[tx][ty]=<span class="number">0</span>;<span class="comment">//尝试结束，取消这个点的标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,startx,starty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读入行列数n和m</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="comment">//读入迷宫</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="comment">//读入起点和终点坐标</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;startx,&amp;starty,&amp;p,&amp;q);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从起点开始搜索</span></span><br><span class="line">book[startx][starty]=<span class="number">1</span>;<span class="comment">//标记起点已经在路径中</span></span><br><span class="line">dfs(startx,starty,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出最短步数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是用来走迷宫的，不过最初人们是用宽搜走迷宫的。</p><hr><h2 id="Intro-to-BFS"><a href="#Intro-to-BFS" class="headerlink" title="Intro to BFS"></a>Intro to BFS</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">note</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="comment">//行</span></span><br><span class="line">    <span class="keyword">int</span> y;<span class="comment">//列</span></span><br><span class="line">    <span class="keyword">int</span> f;<span class="comment">//父亲在队列中的编号，这里不要求输出路径所以可以省去</span></span><br><span class="line">    <span class="keyword">int</span> s;<span class="comment">//步数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">note</span> <span class="title">que</span>[2501];</span><span class="comment">//因为地图大小不超过50*50，所以队列扩展不会超过2500个</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">51</span>][<span class="number">51</span>] = &#123;<span class="number">0</span>&#125;, book[<span class="number">51</span>][<span class="number">51</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> head, tail;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, n, m, startx, starty, p, q, tx, ty, flag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方向数组next</span></span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, <span class="comment">//向右</span></span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, <span class="comment">//向下</span></span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, <span class="comment">//向左</span></span><br><span class="line">        &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;<span class="comment">//向上</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d "</span>, &amp;n, &amp;m); <span class="comment">//读入地图行列数</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;startx, &amp;starty);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列初始化</span></span><br><span class="line">    head = <span class="number">1</span>;</span><br><span class="line">    tail = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//向队列插入迷宫起点</span></span><br><span class="line">    que[tail].x = startx;</span><br><span class="line">    que[tail].y = starty;</span><br><span class="line">    que[tail].f = <span class="number">0</span>;</span><br><span class="line">    que[tail].s = <span class="number">0</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    <span class="comment">//标记起点</span></span><br><span class="line">    book[startx][starty] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    flag = <span class="number">0</span>; <span class="comment">//flag为0表示还没到达终点，为1表示到达</span></span><br><span class="line">    <span class="comment">//当队列不为空时循环</span></span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//枚举4个方向</span></span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算下一个点的坐标</span></span><br><span class="line">            tx = que[head].x + next[k][<span class="number">0</span>];</span><br><span class="line">            ty = que[head].y + next[k][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对下一个点进行一些判断：该点是否越界，是否为障碍物，是否已经在路径中</span></span><br><span class="line">            <span class="keyword">if</span>(a[tx][ty] == <span class="number">0</span> <span class="keyword">and</span> book[tx][ty] == <span class="number">0</span> <span class="keyword">and</span> (tx &gt;= <span class="number">1</span> <span class="keyword">and</span> tx &lt;= n <span class="keyword">and</span> ty &gt;= <span class="number">1</span> <span class="keyword">and</span> ty &lt;= m))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//把这个点标记为已经走过，注意宽搜每个点只入队一次，所以不需要将book数组还原</span></span><br><span class="line">                book[tx][ty] = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//插入新的点到队列中</span></span><br><span class="line">                que[tail].x = tx;</span><br><span class="line">                que[tail].y = ty;</span><br><span class="line">                que[tail].f = head; <span class="comment">//新的点是从head扩展出来的，所以其父亲是head，由于这里不需要输出路径所以可以省去</span></span><br><span class="line">                que[tail].s = que[head].s + <span class="number">1</span>; <span class="comment">//步数是父亲的步数+1</span></span><br><span class="line">                tail++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果到达了终点，标记flag，停止扩展，退出循环</span></span><br><span class="line">            <span class="keyword">if</span>(tx == p <span class="keyword">and</span> ty == q)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        head++;<span class="comment">//一个点的扩展完成后就没用了，将该点出队后才能对后面的点再进行扩展</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印队列尾部最后一个点，也就是终点的步数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, que[tail - <span class="number">1</span>].s); <span class="comment">//注意tail指向队尾的下一位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是话痨了一点我知道！
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>枚举入门</title>
    <link href="http://yoursite.com/2019/02/02/temp/%E6%9E%9A%E4%B8%BE%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/02/temp/枚举入门/</id>
    <published>2019-02-02T13:35:13.000Z</published>
    <updated>2019-02-18T09:37:18.393Z</updated>
    
    <content type="html"><![CDATA[<p>向C语言低头！<a id="more"></a></p><p>中间两个还没搞，最后一个搞不了</p><h2 id="倾斜美感-￣▽￣-”"><a href="#倾斜美感-￣▽￣-”" class="headerlink" title="倾斜美感(￣▽￣)”"></a>倾斜美感(￣▽￣)”</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>], i, total = <span class="number">0</span>, book[<span class="number">10</span>], sum;</span><br><span class="line">    <span class="keyword">for</span>(a[<span class="number">1</span>] = <span class="number">1</span>; a[<span class="number">1</span>] &lt;= <span class="number">9</span>; a[<span class="number">1</span>]++)</span><br><span class="line">        <span class="keyword">for</span>(a[<span class="number">2</span>] = <span class="number">1</span>; a[<span class="number">2</span>] &lt;= <span class="number">9</span>; a[<span class="number">2</span>]++)</span><br><span class="line">            <span class="keyword">for</span>(a[<span class="number">3</span>] = <span class="number">1</span>; a[<span class="number">3</span>] &lt;= <span class="number">9</span>; a[<span class="number">3</span>]++)</span><br><span class="line">                <span class="keyword">for</span>(a[<span class="number">4</span>] = <span class="number">1</span>; a[<span class="number">4</span>] &lt;= <span class="number">9</span>; a[<span class="number">4</span>]++)</span><br><span class="line">                    <span class="keyword">for</span>(a[<span class="number">5</span>] = <span class="number">1</span>; a[<span class="number">5</span>] &lt;= <span class="number">9</span>; a[<span class="number">5</span>]++)</span><br><span class="line">                        <span class="keyword">for</span>(a[<span class="number">6</span>] = <span class="number">1</span>; a[<span class="number">6</span>] &lt;= <span class="number">9</span>; a[<span class="number">6</span>]++)</span><br><span class="line">                            <span class="keyword">for</span>(a[<span class="number">7</span>] = <span class="number">1</span>; a[<span class="number">7</span>] &lt;= <span class="number">9</span>; a[<span class="number">7</span>]++)</span><br><span class="line">                                <span class="keyword">for</span>(a[<span class="number">8</span>] = <span class="number">1</span>; a[<span class="number">8</span>] &lt;= <span class="number">9</span>; a[<span class="number">8</span>]++)</span><br><span class="line">                                    <span class="keyword">for</span>(a[<span class="number">9</span>] = <span class="number">1</span>; a[<span class="number">9</span>] &lt;= <span class="number">9</span>; a[<span class="number">9</span>]++)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) <span class="comment">//初始化book数组</span></span><br><span class="line">                                            book[i] = <span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) <span class="comment">//如果某个数出现过就标记一下</span></span><br><span class="line">                                            book[a[i]] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">//统计出现了多少个不同的数</span></span><br><span class="line">                                        sum = <span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">                                            sum += book[i];</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">//如果出现了9个不同的数，且满足等式条件则输出并计数</span></span><br><span class="line">                                        <span class="keyword">if</span>(sum == <span class="number">9</span> <span class="keyword">and</span> a[<span class="number">1</span>] * <span class="number">100</span> + a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>] + a[<span class="number">4</span>] * <span class="number">100</span> + a[<span class="number">5</span>] * <span class="number">10</span> + a[<span class="number">6</span>]</span><br><span class="line">                                                == a[<span class="number">7</span>] * <span class="number">100</span> + a[<span class="number">8</span>] * <span class="number">10</span> + a[<span class="number">9</span>])</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            total++;</span><br><span class="line">                                            <span class="built_in">printf</span>(<span class="string">"%d%d%d+%d%d%d=%d%d%d\n"</span>, a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>], a[<span class="number">4</span>],</span><br><span class="line">                                                   a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>]);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"total=%d"</span>, total / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="制杖小游戏-orz"><a href="#制杖小游戏-orz" class="headerlink" title="制杖小游戏 orz"></a>制杖小游戏 orz</h2><h2 id="火柴棍算式-O-O"><a href="#火柴棍算式-O-O" class="headerlink" title="火柴棍算式 O(^ _ ^)O"></a>火柴棍算式 O(^ _ ^)O</h2><h2 id="严肃的全排列-qwq"><a href="#严肃的全排列-qwq" class="headerlink" title="严肃的全排列 qwq"></a>严肃的全排列 qwq</h2><p>饶了我不可能再枚举了…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;向C语言低头！
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="枚举" scheme="http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>最基本的几种数据结构</title>
    <link href="http://yoursite.com/2019/02/01/temp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/01/temp/数据结构入门/</id>
    <published>2019-02-01T14:14:37.000Z</published>
    <updated>2019-02-18T09:36:48.263Z</updated>
    
    <content type="html"><![CDATA[<p>向C语言低头！<a id="more"></a></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[<span class="number">100</span>];<span class="comment">//队列主体，用来存储内容</span></span><br><span class="line">    <span class="keyword">int</span> head;<span class="comment">//队首</span></span><br><span class="line">    <span class="keyword">int</span> tail;<span class="comment">//队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">queue</span> <span class="title">q</span>;</span></span><br><span class="line">    <span class="comment">//初始化队列</span></span><br><span class="line">    q.head = <span class="number">1</span>;</span><br><span class="line">    q.tail = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//依次向队列中插入9个数</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q.data[q.tail]);</span><br><span class="line">        q.tail++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q.head &lt; q.tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//打印队首并将队首出队</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, q.data[q.head]);</span><br><span class="line">        q.head++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将新队首添加到队尾</span></span><br><span class="line">        q.data[q.tail] = q.data[q.head];</span><br><span class="line">        q.tail++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再将队首出队</span></span><br><span class="line">        q.head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">101</span>], s[<span class="number">101</span>];<span class="comment">//C语言用字符数组存储字符串</span></span><br><span class="line">    <span class="keyword">int</span> i, len, mid, next, top;</span><br><span class="line"></span><br><span class="line">    gets(a);<span class="comment">//读入一行字符串</span></span><br><span class="line">    len = <span class="built_in">strlen</span>(a); <span class="comment">//求字符串的长度</span></span><br><span class="line">    mid = len / <span class="number">2</span> - <span class="number">1</span>; <span class="comment">//字符串的中点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断字符串的长度是奇数还是偶数，并找出需要进行字符匹配的起始下标</span></span><br><span class="line">    <span class="keyword">if</span>(len % <span class="number">2</span> == <span class="number">0</span>) next = mid + <span class="number">1</span>; <span class="comment">//偶数</span></span><br><span class="line">    <span class="keyword">else</span> next = mid + <span class="number">2</span>; <span class="comment">//奇数，忽略字符串中间的字符</span></span><br><span class="line"></span><br><span class="line">    top = <span class="number">0</span>; <span class="comment">//栈的初始化</span></span><br><span class="line">    <span class="comment">//将mid及之前的字符依次入栈</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= mid; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        top++;</span><br><span class="line">        s[top] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始匹配</span></span><br><span class="line">    <span class="keyword">for</span>(i = next; i &lt;= len - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] != s[top]) <span class="keyword">break</span>;</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果top值为0，则说明栈内所有字符都被匹配了</span></span><br><span class="line">    <span class="keyword">if</span>(top == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示链表结点类型的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span>,*<span class="title">p</span>,*<span class="title">q</span>,*<span class="title">t</span>;</span></span><br><span class="line"><span class="keyword">int</span> i,n,a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">head=<span class="literal">NULL</span>;<span class="comment">//头指针初始为空</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//循环读入n个数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="comment">//动态申请一个空间，用来存放一个结点，并用临时指针p指向这个节点</span></span><br><span class="line">p=(struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));</span><br><span class="line">p-&gt;data=a;<span class="comment">//将数据存储到当前结点的data域中</span></span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;<span class="comment">//设置当前结点的后继指针指向空，也就是当前结点的下一个结点为空</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>) head=p;<span class="comment">//如果这是第一个创建的结点，则将头指针指向这个结点</span></span><br><span class="line"><span class="keyword">else</span> q-&gt;next=p;<span class="comment">//如果不是第一个创建的结点，则将上一个结点的后继指针指向当前节点</span></span><br><span class="line">q=p;<span class="comment">//指针q指向当前节点，也就是当前结点变成了上一个结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);<span class="comment">//读入待插入的数</span></span><br><span class="line">t=head;<span class="comment">//从链表头部开始遍历</span></span><br><span class="line"><span class="keyword">while</span>(t!=<span class="literal">NULL</span>)<span class="comment">//当没有到达链表尾部时循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;next==<span class="literal">NULL</span> || t-&gt;next-&gt;data&gt;a)<span class="comment">//如果当前结点是最后一个结点或者下一个结点的值大于待插入数的时候插入</span></span><br><span class="line">&#123;</span><br><span class="line">p=(struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node));<span class="comment">//动态申请一个空间，用来存放新增结点</span></span><br><span class="line">p-&gt;data=a;</span><br><span class="line">p-&gt;next=t-&gt;next;<span class="comment">//新增结点的后继指针指向当前结点的后继指针所指向的结点</span></span><br><span class="line">t-&gt;next=p;<span class="comment">//当前结点的后继指针指向新增结点</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//完成插入退出循环</span></span><br><span class="line">&#125;</span><br><span class="line">t=t-&gt;next;<span class="comment">//继续下一个结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出链表中所有的数</span></span><br><span class="line">t=head;<span class="comment">//从链表头部开始遍历</span></span><br><span class="line"><span class="keyword">while</span>(t!=<span class="literal">NULL</span>)<span class="comment">//当没有到达链表尾部时循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,t-&gt;data);</span><br><span class="line">t=t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;向C语言低头！
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>最基本的几种排序算法</title>
    <link href="http://yoursite.com/2019/02/01/temp/%E6%8E%92%E5%BA%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/02/01/temp/排序入门/</id>
    <published>2019-02-01T14:14:36.000Z</published>
    <updated>2019-02-06T12:33:08.710Z</updated>
    
    <content type="html"><![CDATA[<p>向C语言低头？<br><a id="more"></a></p><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[max],n,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;max;i++)</span><br><span class="line">a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">a[t]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[i];j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> key;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">element</span> <span class="title">book</span>[<span class="title">n</span>];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:book)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x.key&gt;&gt;x.value;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j].value&lt;book[j+<span class="number">1</span>].value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">element</span> <span class="title">temp</span>=<span class="title">book</span>[<span class="title">j</span>];</span></span><br><span class="line">book[j]=book[j+<span class="number">1</span>];</span><br><span class="line">book[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:book)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x.key&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp = a[left], i = left, j = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i != j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[j] &gt;= temp <span class="keyword">and</span> i &lt; j) j--;</span><br><span class="line">        <span class="keyword">while</span>(a[i] &lt;= temp <span class="keyword">and</span> i &lt; j) i++;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) &#123;<span class="keyword">int</span> t = a[i]; a[i] = a[j]; a[j] = t;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a[left] = a[i], a[i] = temp;</span><br><span class="line"></span><br><span class="line">    quicksort(left, i - <span class="number">1</span>);</span><br><span class="line">    quicksort(i + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    quicksort(<span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;向C语言低头？&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>部分日常作业の解答の精选</title>
    <link href="http://yoursite.com/2019/02/01/temp/%E9%97%AE%E6%B1%82%E4%BD%9C%E4%B8%9A%E8%A7%A3%E7%AD%94%E7%B2%BE%E9%80%89/"/>
    <id>http://yoursite.com/2019/02/01/temp/问求作业解答精选/</id>
    <published>2019-02-01T02:04:10.000Z</published>
    <updated>2019-04-15T11:08:40.791Z</updated>
    
    <content type="html"><![CDATA[<p>我猜我会继续写注释的，或许哪天有空还会把题面截下来(打字是别想了)。<a id="more"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">10006.</span> `<span class="number">2</span>^n`</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.0lf"</span>, <span class="built_in">pow</span>(<span class="number">2</span>, n));</span><br><span class="line">    <span class="comment">//pow函数的调用值与返回值都为浮点型</span></span><br><span class="line">    <span class="comment">//对于printf, %f和%lf没有区别</span></span><br><span class="line">    <span class="comment">//因为在printf中float类型自动转化为double, 从C语言标准来说printf并没有%lf的定义, 但大多数编译器都能接受</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10008.</span> `排序`</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    sort(a.begin(), a.end(), cmp);</span><br><span class="line">    <span class="comment">//向算法传递函数(10.3.1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10009.</span> `字典序`</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    b = a;<span class="comment">//b用来存储当前字典序最小的循环同构串</span></span><br><span class="line">    <span class="keyword">int</span> m = a.length(); <span class="comment">//string的length成员函数</span></span><br><span class="line">    <span class="keyword">char</span> last;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        last = a[m - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//第m-1位到第1位依次后移一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第m位的元素移到第一位</span></span><br><span class="line">        a[<span class="number">0</span>] = last;</span><br><span class="line">        <span class="comment">//如果移动后得到的循环同构串a比当前字典序最小的循环同构串b小, 则将a赋值给b</span></span><br><span class="line">        <span class="keyword">if</span>(a &lt; b)b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10010.</span> `a+b加强版`</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> na[<span class="number">200005</span>] = &#123;<span class="number">0</span>&#125;, nb[<span class="number">200005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只限两个非负整数相加</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">int</span> la = a.size(), lb = b.size();<span class="comment">//size函数等同于length函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//a,b逆序放入na,nb</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; la; i++) na[la - <span class="number">1</span> - i] = a[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lb; i++) nb[lb - <span class="number">1</span> - i] = b[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">int</span> lmax = la &gt; lb ? la : lb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lmax; i++) na[i] += nb[i], na[i + <span class="number">1</span>] += na[i] / <span class="number">10</span>, na[i] %= <span class="number">10</span>;<span class="comment">//进位如果必要的的话</span></span><br><span class="line">    <span class="keyword">if</span>(na[lmax]) lmax++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = lmax - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) ans += na[i] + <span class="string">'0'</span>;<span class="comment">//na+nb的结果逆序放入ans</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) <span class="built_in">cout</span> &lt;&lt; add(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10011.</span> 离散化</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100000</span>], b[<span class="number">100000</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; a[i], b[i] = a[i];</span><br><span class="line">    sort(a, a + n, cmp);</span><br><span class="line">    <span class="keyword">int</span> t = unique(a, a + n) - a;</span><br><span class="line">    <span class="comment">//unique使不重复值出现在元素序列开始, 返回指向最后一个不重复元素之后的位置的迭代器</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i] == a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; j + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10011.</span> 离散化</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), b(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;p : a) <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">    b = a; <span class="comment">//a排序并删重成为b</span></span><br><span class="line">    <span class="comment">//不同于数组, vector可以赋值</span></span><br><span class="line">    sort(b.begin(), b.end());</span><br><span class="line">    b.erase(unique(b.begin(), b.end()), b.end()); <span class="comment">//使用erase成员函数删除重复元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;p : a) <span class="built_in">cout</span> &lt;&lt; lower_bound(b.begin(), b.end(), p) - b.begin() + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    lower_bound(起始地址，结束地址，要查找的数值) 返回的是数值第一个出现的位置。</span></span><br><span class="line"><span class="comment">    upper_bound(起始地址，结束地址，要查找的数值) 返回的是数值最后一个出现的位置。</span></span><br><span class="line"><span class="comment">    binary_search(起始地址，结束地址，要查找的数值) 返回的是是否存在这么一个数，是一个bool值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10012.</span> 离散化<span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">    <span class="comment">//map的默认构造函数将其初始化为空容器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">        <span class="keyword">if</span>(mp.count(p) == <span class="number">0</span>) mp[p] = ++tot;</span><br><span class="line">        <span class="comment">//若mp的key中尚未有p, 则创建键p和值++tot</span></span><br><span class="line">        <span class="comment">//c.count(k)返回关联容器c中关键字等于k的元素的数量(11.3.5)</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mp[p] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10013.</span> `AND`子集</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans[<span class="number">50000</span>];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = y; i &gt; <span class="number">0</span>; i = (i - <span class="number">1</span>)&amp;y)<span class="comment">//关键</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[t] = i;</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = t - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; a(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>];<span class="comment">//y</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> x = (a[<span class="number">0</span>] - <span class="number">1</span>) &amp; a[<span class="number">0</span>]; x != a[<span class="number">0</span>]; x = (x - <span class="number">1</span>) &amp; a[<span class="number">0</span>])</span><br><span class="line">        a.push_back(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p = a.rbegin(); p != a.rend(); p++) <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10016.</span> C(n, m)</span><br><span class="line"></span><br><span class="line">一个数组 a 有 n 个元素，从中选取 m 个数的组合 v，使用递归算法实现</span><br><span class="line"><span class="number">1</span>） 选择a的第<span class="number">1</span>个元素为b的第一个元素，即：a[<span class="number">0</span>] = b[<span class="number">0</span>]；</span><br><span class="line">        <span class="number">2</span>） 在a第一个元素之后的其它元素中，选取其余的 m - <span class="number">1</span>个数，这是上述问题的子问题，递归即可。</span><br><span class="line">        <span class="number">3</span>） 依次选择 data的第 <span class="number">2</span> 到 n - m + <span class="number">1</span>元素作为起始点，再执行<span class="number">1</span>、<span class="number">2</span>步骤。</span><br><span class="line">        <span class="number">4</span>） 递归算法过程中的 m = <span class="number">0</span> 时，输出 arr 的所有元素。</span><br><span class="line"></span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">                <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k[<span class="number">11</span>];<span class="comment">//至多11个元素</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t == m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">cout</span> &lt;&lt; k[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = a + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            k[t + <span class="number">1</span>] = i;</span><br><span class="line">            find(i, t + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k[<span class="number">1</span>] = i;</span><br><span class="line">        find(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *a)</span><span class="comment">//输出数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> pos)</span><span class="comment">//递归</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a[pos - <span class="number">1</span>] + <span class="number">1</span>; i &lt;= n - m + pos; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[pos] = i;</span><br><span class="line">        <span class="keyword">if</span> (pos == m) print(a);</span><br><span class="line">        <span class="keyword">else</span> combine(a, pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    combine(a, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10017.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">string</span>::iterator p;<span class="comment">// 迭代器(3.4.1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnextint</span><span class="params">()</span><span class="comment">// get next operand</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p != s.end() &amp;&amp; *p == <span class="string">' '</span>) p++;<span class="comment">// end 函数(3.4.1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != s.end() &amp;&amp; *p &gt;= <span class="string">'0'</span> &amp;&amp; *p &lt;= <span class="string">'9'</span>) rt = rt * <span class="number">10</span> + *p - <span class="string">'0'</span>, p++;<span class="comment">// 字符转为数字</span></span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnextop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p != s.end() &amp;&amp; *p == <span class="string">' '</span>) p++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*p == <span class="string">'*'</span>) <span class="keyword">return</span> p++, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*p == <span class="string">'+'</span>) <span class="keyword">return</span> p++, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);<span class="comment">// getline 函数(3.2.2)</span></span><br><span class="line">    p = s.begin();<span class="comment">// begin 函数(3.4.1)</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value = getnextint();</span><br><span class="line">    <span class="keyword">while</span> (p != s.end())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> op = getnextop();</span><br><span class="line">        <span class="keyword">int</span> tmp_value = getnextint();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            value *= tmp_value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += value;</span><br><span class="line">            value = tmp_value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans += value;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10018.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 第一种</span></span><br><span class="line">    <span class="comment">/* 对每个1到n的数, 我们可以表示成a×b(a&lt;=b), 1到n的每个数的因子数的和, 等价于(a,b)有序对的个数乘2, 其中a&lt;b, ab&lt;=n, 加上(a,a)有序对的个数a^2&lt;=n.</span></span><br><span class="line"><span class="comment">    令m=sqrt(n), 有a&lt;=m. 对每个a, 可能的b有[n/i]-i个, 因为要保证a&lt;b. 所以答案为sigma[i, 1-&gt;n]2*(n/i-i)+1.*/</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">        ans = (ans + (n / i - i) * <span class="number">2</span> + <span class="number">1</span>) % <span class="number">233</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种</span></span><br><span class="line">    <span class="comment">/* 当1到x的某个a有因子i时, 也会有因子a/i. 因此只要求出sqrt(n)之前的因子个数, 最后乘2.</span></span><br><span class="line"><span class="comment">    不过其中还有重复计数，假设t=sqrt(n), 那么所有小于等于t的因子都被重复计数t次, 所以一共有t*t个重复计算的因子. */</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; i++)</span><br><span class="line">        sum += n / i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)(sum * <span class="number">2</span> - w * w) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三种</span></span><br><span class="line">    <span class="comment">/* 观察 n 为 50 时的暴力枚举结果不难发现: 相等的值都是连续的. 于是就可以只算一次这个值，再求出这个值的个数.</span></span><br><span class="line"><span class="comment">    观察两个5是如何出现的: i=9时, 50/9=5余5; 余数里面还有一个5, 那么50/10也可以商5.</span></span><br><span class="line"><span class="comment">    一般而言, n/i=a余b(b&gt;a); i每增加1, 余数b就减少a, 当b减少到小于a时, 这一块就结束了, 每一块都是这个原理 */</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val = n / i;<span class="comment">//当前块的值</span></span><br><span class="line">        <span class="keyword">int</span> num = (n % i) / val + <span class="number">1</span>;<span class="comment">//该值的数量</span></span><br><span class="line">        ans += num * val;</span><br><span class="line">        i += num;<span class="comment">//加速移到下一块</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10019.</span> 不是, 怎么队友都死光了.</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> a[m][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cin</span> &gt;&gt; a[i][<span class="number">0</span>] &gt;&gt; a[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function">UnionFindSet <span class="title">u</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) u.merge(a[i][<span class="number">0</span>], a[i][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(u.setid(i) == i)res++;<span class="comment">//u.setid(i)==i的原理是什么?观察得到?</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10020.</span> 积分</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, a, b;<span class="comment">//次数, 积分上下限</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    ll p[<span class="number">21</span>];<span class="comment">//系数</span></span><br><span class="line">    ll ans = <span class="number">0</span>;<span class="comment">//结果</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += <span class="number">2520</span> * p[i] * (<span class="built_in">pow</span>(b, i + <span class="number">1</span>) - <span class="built_in">pow</span>(a, i + <span class="number">1</span>)) / (i + <span class="number">1</span>);<span class="comment">//定积分公式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10021.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>//矩阵</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m[N][N];</span><br><span class="line">&#125; ans, base = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">multi</span><span class="params">(matrix a, matrix b)</span><span class="comment">//矩阵乘法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    matrix tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.m[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;  k &lt; N; k++)</span><br><span class="line">                tmp.m[i][j] = (tmp.m[i][j]</span><br><span class="line">                               + <span class="number">1l</span>l * a.m[i][k] * b.m[k][j] % MOD) % MOD;</span><br><span class="line">            <span class="comment">// 可代之以:</span></span><br><span class="line">            <span class="comment">// tmp.m[i][j] = 0;</span></span><br><span class="line">            <span class="comment">// for(int k = 0; k &lt; N; k++)</span></span><br><span class="line">            <span class="comment">//     tmp.m[i][j] += (a.m[i][k] * b.m[k][j]) % MOD;</span></span><br><span class="line">            <span class="comment">// tmp.m[i][j] %= MOD;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(matrix a, <span class="keyword">long</span> <span class="keyword">long</span> n)</span><span class="comment">//矩阵快速幂(矩阵a的n次幂)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)<span class="comment">//初始化ans为单位矩阵</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) ans.m[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> ans.m[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可代之以:</span></span><br><span class="line">    <span class="comment">// ans.m[0][0] = ans.m[1][1] = 1;</span></span><br><span class="line">    <span class="comment">// ans.m[0][1] = ans.m[1][0] = 0;</span></span><br><span class="line">    <span class="keyword">while</span>(n)<span class="comment">// 完全类似整数快速幂</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ans = multi(ans, a);</span><br><span class="line">        a = multi(a, a);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.m[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">pow</span>(base, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10022.</span> AceSrc 的网络知识普及课 - 子网掩码</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> IP</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> ip;</span><br><span class="line">    <span class="keyword">uint8_t</span> _ip[<span class="number">4</span>];</span><br><span class="line">&#125; w, mask;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ip_format <span class="meta-string">"%hhu.%hhu.%hhu.%hhu"</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">uint32_t</span>, <span class="keyword">uint32_t</span>&gt;, <span class="keyword">uint32_t</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(ip_format <span class="string">" "</span> ip_format,</span><br><span class="line">              &amp;w._ip[<span class="number">3</span>], &amp;w._ip[<span class="number">2</span>], &amp;w._ip[<span class="number">1</span>], &amp;w._ip[<span class="number">0</span>],</span><br><span class="line">              &amp;mask._ip[<span class="number">3</span>], &amp;mask._ip[<span class="number">2</span>], &amp;mask._ip[<span class="number">1</span>], &amp;mask._ip[<span class="number">0</span>]);</span><br><span class="line">        mp[make_pair(w.ip &amp; mask.ip, mask.ip)] = (<span class="number">1L</span>L &lt;&lt; (<span class="number">32</span> - __builtin_popcount(mask.ip))) - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : mp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> w = *<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> IP *&gt;(&amp;p.first.first);</span><br><span class="line">        <span class="built_in">printf</span>(ip_format <span class="string">" %u\n"</span>,</span><br><span class="line">               w._ip[<span class="number">3</span>], w._ip[<span class="number">2</span>], w._ip[<span class="number">1</span>], w._ip[<span class="number">0</span>],</span><br><span class="line">               p.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">#<span class="number">10023.</span> 不知道该出啥了.</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//将字符串表示的10进制大整数转换为m进制的大整数</span></span><br><span class="line"><span class="comment">//并返回m进制大整数的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s)</span><span class="comment">//判断串是否为全零串</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">        <span class="keyword">if</span>(s[i] != <span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> <span class="comment">//n进制转m进制只限0-9进制，若涉及带字母的进制，稍作修改即可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> r, ans;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!judge(s)) <span class="keyword">return</span> <span class="string">"0"</span>;<span class="comment">//特判</span></span><br><span class="line">    <span class="keyword">while</span>(judge(s))<span class="comment">//被除数不为0则继续</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            r += (d * n + s[i] - <span class="string">'0'</span>) / m + <span class="string">'0'</span>; <span class="comment">//求出商</span></span><br><span class="line">            d = (d * n + (s[i] - <span class="string">'0'</span>)) % m; <span class="comment">//求出余数</span></span><br><span class="line">        &#125;</span><br><span class="line">        s = r; <span class="comment">//把商赋给下一次的被除数</span></span><br><span class="line">        r = <span class="string">""</span>; <span class="comment">//把商清空</span></span><br><span class="line">        ans += d + <span class="string">'0'</span>; <span class="comment">//加上进制转换后数字</span></span><br><span class="line">        d = <span class="number">0</span>; <span class="comment">//清空余数</span></span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ans.begin(), ans.end()); <span class="comment">//倒置下</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//大整数通用处理</span></span><br><span class="line">    <span class="built_in">string</span> a, b, a1, b1;</span><br><span class="line">    <span class="comment">//a="13";</span></span><br><span class="line">    <span class="comment">//b="107";</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    a1 = solve(a, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">    b1 = solve(b, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;a1&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;b1&lt;&lt;endl;</span></span><br><span class="line">    reverse(a1.begin(), a1.end());</span><br><span class="line">    reverse(b1.begin(), b1.end());</span><br><span class="line">    <span class="comment">//cout&lt;&lt;a1&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;b1&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> la = a1.size();</span><br><span class="line">    <span class="keyword">int</span> lb = b1.size();</span><br><span class="line">    <span class="keyword">int</span> Length = max(la, lb);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;Length&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Length == la)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//b1用0补足高位</span></span><br><span class="line">        <span class="keyword">while</span>(b1.size() &lt; la)</span><br><span class="line">        &#123;</span><br><span class="line">            b1 += <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;a1[i]&lt;&lt;" "&lt;&lt;b1[i]&lt;&lt;"every digit"&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">//异或逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (a1[i] == b1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                a1[i] = <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> a1[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(a1.begin(), a1.end());</span><br><span class="line">        a1 = solve(a1, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a1.size() &lt; lb)</span><br><span class="line">        &#123;</span><br><span class="line">            a1 += <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Length; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;a1[i]&lt;&lt;" "&lt;&lt;b1[i]&lt;&lt;"every digit"&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span> (a1[i] == b1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                b1[i] = <span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> b1[i] = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverse(b1.begin(), b1.end());</span><br><span class="line">        b1 = solve(b1, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我猜我会继续写注释的，或许哪天有空还会把题面截下来(打字是别想了)。
    
    </summary>
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="问题求解" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3/"/>
    
      <category term="OJ" scheme="http://yoursite.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>TO DO LIST 2019</title>
    <link href="http://yoursite.com/2019/01/15/temp/TO%20DO%20LIST%202019/"/>
    <id>http://yoursite.com/2019/01/15/temp/TO DO LIST 2019/</id>
    <published>2019-01-15T07:42:03.000Z</published>
    <updated>2019-02-12T08:50:06.934Z</updated>
    
    <content type="html"><![CDATA[<p>话说多数人都在误用flag这个词诶。<a id="more"></a></p><h2 id="寒假篇-1-15-2-22"><a href="#寒假篇-1-15-2-22" class="headerlink" title="寒假篇 (1/15 : 2/22)"></a>寒假篇 (1/15 : 2/22)</h2><ul><li>按照问题求解第二学期的学习要求，扎实学习 <em>TC</em>，<em>CS</em>，<em>GC</em> 三本书，并认真完成课后习题</li></ul><hr><ul><li>快速回顾 <em>C++ Primer</em> 的第一部分</li><li>认真巩固 <em>C++ Primer</em> 的第二部分 </li><li>扎实学完 <em>C++ Primer</em> 的第三部分</li><li>快速学完 <em>Python编程：从入门到实践</em> 的第一部分</li><li>至少开始 <em>Python编程：从入门到实践</em> 的第二部分的第一个项目</li></ul><hr><ul><li>每天早晚背托福词汇，四十天完成四千三百词</li><li><em>TPO</em> 刷题超过二十五套，模考刷题超过五套</li></ul><hr><ul><li>成功举办沂南一中二零一五级毕业生返校宣讲活动</li></ul><h2 id="春夏学期篇-2-25-6-16"><a href="#春夏学期篇-2-25-6-16" class="headerlink" title="春夏学期篇 (2/25 : 6/16)"></a>春夏学期篇 (2/25 : 6/16)</h2><ul><li>学好问题求解二，有余力就学习问题求解三</li><li>提高编程能力，参加 <em>CodeForces</em> 而不觉勉强</li></ul><hr><ul><li>无论有没有早课，都六点半起床七点出门</li><li>无论有没有任务，都不在十二点之前上床</li><li>不因为学习之外的事请超过十二点碎觉</li></ul><hr><ul><li>不把手机带到床上</li><li>在图书馆或教室学习</li><li>不把吉他带去学校</li></ul><hr><ul><li>每天早晚规律洗漱</li><li>穿过的衣服及时洗</li><li>每天整理床铺、桌椅</li><li>每周宿舍清洗、整理</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说多数人都在误用flag这个词诶。
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="计划" scheme="http://yoursite.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>再见2018, 你好2019!</title>
    <link href="http://yoursite.com/2018/12/29/%E5%86%8D%E8%A7%812018,%20%E4%BD%A0%E5%A5%BD2019!/"/>
    <id>http://yoursite.com/2018/12/29/再见2018, 你好2019!/</id>
    <published>2018-12-28T16:10:23.000Z</published>
    <updated>2019-02-03T04:41:51.100Z</updated>
    
    <content type="html"><![CDATA[<p>考试周到了, 我现在慌得一批/发抖。 <a id="more"></a></p><p>这几天狂补 C++, 英文书真的读太慢, 只得买了本 <em>C++ Primer</em> 中文版两天到了, 然后一本书看了三天(看完? 怎么可能)。 今天开始刘汝佳的书, 读着挺有意思不知道备考能不能 work(讲道理复习一下作业题就好啦)。 </p><p>这学期还真不是一点实际东西都没学到, 平时挣扎中很多东西留下了, 一经整合知识给压实了(胡说八道)。 </p><p>快把这文章写好吧, 再不写年底都要翻过去了。 说是文章, 其实文笔完全 programmer 化了。 </p><h1 id="九月之前已被遗忘-九月至今混沌如常。"><a href="#九月之前已被遗忘-九月至今混沌如常。" class="headerlink" title="九月之前已被遗忘, 九月至今混沌如常。"></a>九月之前已被遗忘, 九月至今混沌如常。</h1><p>高中的日子遥远的像上个世纪, 最接近此刻的高三都化作了淡影, 只有它的气息还隐隐留了下来。 </p><p>回忆似乎不是现在我想做的事情。 </p><p>而八月底来到南京, 人生进入新的天地, 在脱胎换骨的愉悦与无法完全适应的焦虑中, 脚步停滞甚至倒退。 </p><p>混沌似乎成了主线。 </p><h1 id="天开教泽-道启南雍。"><a href="#天开教泽-道启南雍。" class="headerlink" title="天开教泽, 道启南雍。"></a>天开教泽, 道启南雍。</h1><p>也曾为明明有其他选择, 却来到一般认为的华五最差而不安。 最终我认为那不过是虚荣作祟, 我还是做了正确的选择。 </p><p>前身国立中央大学位居亚洲第一, 清北所不及, 改革时一分十四, 未曾合并一所高校却长期位列三甲, 直到近些年始有下滑, 所以院楼自习室里才有学长学姐们写下的 <em>“Make NJU Great Again”</em>。 </p><p>我爱南大, 这是我生活的地方, 仙林斑斓, 鼓楼深静。 </p><h1 id="寒假又有哪些雄心壮志了"><a href="#寒假又有哪些雄心壮志了" class="headerlink" title="寒假又有哪些雄心壮志了?"></a>寒假又有哪些雄心壮志了?</h1><p>那就先说点有的没的。 </p><p>不想学习的时候瞎鼓捣, 电脑主题看着越来越顺眼了, 就缺 MacType 了/笑哭。 </p><p>关于博客, 把用 Hexo 搭的主题和内容都完善下，还想搞清原理, 比如用到的 Git 和 Node。js, 至少 Markdown 的语法要精通吧。 然后看看域名有没有免费的可申。 另外 WordPress 了解下, 如果它更好可能会搬, 如此大概率 PHP, HTML 得学起来(我猜)? </p><p>这个先不管, Python 辣么有意思肯定要学, QT 能做 C++ 的图形界面肯定要学。 嗯就酱。 </p><p>还有，给学计算机的高中同学建个群, 大家来交流(友)呀。 </p><p>尝试 Ubuntu/Linux/Unix 系统，到现在也不知道他们什么关系嘤。 </p><p>买周老师的西瓜书, 买了再说, 怕什么看不懂放着吃灰。 </p><p>下面是些正经事。 </p><p>备考 TOEFL (预祝首考过110/撒花), 练口语, 练听力, 背单词, 刷 TPO, 具体的复习细节参考 XDF 的模考分析加上网上的信息吧, 对这个考试我真的没底气, 寄希望于 <em>“Make My English Good Again”</em>吧(逃)。 </p><p>预习下学期问求，主要是 <em>Introduction to Algorithms</em>, <em>Discrete Mathematics</em> 两本书吧, 先找16级的学长学姐要课件。 如果还算闲就再把 DH, UD 再读读, 其实这也是老师推荐做的。 </p><p>最终该看什么书还是自己的事, 具体也没决定, 但是下个 semester 的教材必看, 不希望以后问求给我的压力更大。 </p><p>(跪求蓄爷和栗子两位让我期末及格呜呜呜) </p><p>编程是重头戏, 刷 POJ, 一路把 C++ STL, 各种常用算法等等都学掉, 以能够使用为目标, 还算闲就细读 <em>C++ Primer</em>, 当然它主要还是做工具书了, 话说 <em>C Primer Plus</em> 怎么就被我扔进了历史的垃圾堆? </p><p>别太指望一个寒假能做多少事, 有组织活动和参加聚会什么的, 以上估计已经是极限, 其实日常补番看片的就占去大量时间了, 还得发发呆, 假期不希望那么紧张。 </p><p>极其次要的, 如果再有空就看看数分高代好了(划去)。 </p><p>还有, 学日语, 这个好玩了/斜眼笑。 </p><h1 id="脑中盘旋的-部分观点及对未来的看法。"><a href="#脑中盘旋的-部分观点及对未来的看法。" class="headerlink" title="脑中盘旋的, 部分观点及对未来的看法。"></a>脑中盘旋的, 部分观点及对未来的看法。</h1><p>大一上学业一团糟, 学业之外随之凝涩起来。 明年我就是一名纯粹的计科学生了, 期望对学业变得更专心更享受。 </p><p>家家有本难念的经, 每所大学都不可能完美, 当初选择南大很重要的原因就是学业和生活的安排比其他的选择更成熟和稳定。 </p><p>然而对于匡院来说, 计算机方向的课程体系这一段是强行插起来的, 既要保持大理科模式, 又要去适应计算机拔尖的课程体系, 结果就是给零基础学生造成过大的压力。 </p><p>当然过了今年就几乎是计科那边的学生了, 不需要再去学太多杂乱的东西, 学业也会慢慢好起来吧。 </p><p>然后想打 ACM  可是没基础/委屈, 不知道有没有人帮忙, 当然胡老师帮过我一点点。 虽然栗子超强但是带学弟应该也不是他的任务吧, 放假后找他聊随机应变啦。 </p><p>他们大一参加美赛真是, 当然肯定挺有意思, 但是我还是快点回家过年吧。 以及没想好以后要不要专门花时间学, 要不要认真准备建模。 </p><p>我这学期的绩点肯定唉, 希望半个学期影响不会很大吧。</p><p><strong>最后无论如何, 元旦到了, 新年快乐!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考试周到了, 我现在慌得一批/发抖。
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="年终" scheme="http://yoursite.com/tags/%E5%B9%B4%E7%BB%88/"/>
    
  </entry>
  
  <entry>
    <title>期末考试要来啦!</title>
    <link href="http://yoursite.com/2018/12/19/%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95%E8%A6%81%E6%9D%A5%E5%95%A6/"/>
    <id>http://yoursite.com/2018/12/19/期末考试要来啦/</id>
    <published>2018-12-19T13:04:10.000Z</published>
    <updated>2019-02-01T14:25:34.765Z</updated>
    
    <content type="html"><![CDATA[<p>其实是想说期末要来啦，考试只是一部分吧。<a id="more"></a></p><p>有人说，吃喝玩乐就像是泡脚，期末考试就像是把洗脚水喝掉。泡得越舒服，洗脚水就越难喝。<br>说的真对，我没什么好反驳的，只能最后几天少泡脚。</p><p>忙里偷闲花了一下午把这个博客搭起来，本想等寒假里研究一下再建，然而有自己的博客的想法实在太诱人，忍了几次终于没忍住。</p><p>那就这样，写问求作业吧。一周之后或许会来写篇年终总结吧，在大学里也感受到所谓的 <em>岁末的忧伤与热血</em>了，需要写点什么回望一下展望一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实是想说期末要来啦，考试只是一部分吧。
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
